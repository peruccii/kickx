// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  name        String
  photo       String?
  birthDate   DateTime
  cpf         String
  createdAt   DateTime     @default(now())
  money       Float        @default(0)
  purchased   Tennis[]     @relation("purchasedTennis")
  Like        Like[]
  CartItem    CartItem[]
  Offer       Offer[]
  Problem     Problem[]
  PremiumUser PremiumUser?
  Tennis      Tennis[]
  InObserve   InObserve[]

  @@map("user")
}

model Tennis {
  id            String        @id @default(uuid())
  photo         String
  name          String
  description   String
  used          Boolean
  usedDuration  String?
  fastSell      Boolean       @default(false)
  size          String
  price         Float
  code          String        @unique
  seller        User          @relation(fields: [sellerId], references: [id])
  sellerId      String
  purchasedBy   User?         @relation("purchasedTennis", fields: [purchasedById], references: [id])
  purchasedById String?
  InObserve     InObserve[]
  Like          Like[]
  CartItem      CartItem[]
  Offer         Offer[]
  Giveaway      Giveaway[]
  TennisBrand   TennisBrand[]
  Boxes         Boxes?        @relation(fields: [boxesId], references: [id])
  boxesId       String?
}

model Brand {
  id          String        @id @default(uuid())
  name        String        @unique
  photo       String
  TennisBrand TennisBrand[]

  @@map("brands")
}

model InObserve {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  Tennis   Tennis? @relation(fields: [tennisId], references: [id])
  tennisId String?

  @@map("inobserve")
}

model Boxes {
  id     String   @id @default(uuid())
  photo  String
  name   String   @unique
  price  Float
  Tennis Tennis[]

  @@map("boxes")
}

model TennisBrand {
  tennis   Tennis @relation(fields: [tennisId], references: [id])
  tennisId String
  brand    Brand  @relation(fields: [brandId], references: [id])
  brandId  String

  @@id([tennisId, brandId])
  @@map("tennis_brand")
}

model Like {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  tennis   Tennis @relation(fields: [tennisId], references: [id])
  tennisId String

  @@id([userId, tennisId])
  @@map("user_like")
}

model CartItem {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  tennis   Tennis @relation(fields: [tennisId], references: [id])
  tennisId String

  @@id([userId, tennisId])
  @@map("user_cart")
}

model Offer {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  tennis   Tennis @relation(fields: [tennisId], references: [id])
  tennisId String
  price    Float

  @@map("offers")
}

model Giveaway {
  id          String @id @default(uuid())
  name        String
  photo       String
  description String
  tennis      Tennis @relation(fields: [tennisId], references: [id])
  tennisId    String

  @@map("giveaways")
}

model Problem {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  name     String
  describe String

  @@map("problems")
}

model PremiumUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  coupons   Int      @default(0)
  tags      String   @default("premium")
  createdAt DateTime @default(now())

  @@map("premiun_user")
}
